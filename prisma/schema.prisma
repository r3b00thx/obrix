datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Servers {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  icon       String
  banner     String?
  title      String
  tag        String
  inviteLink Json
  public     Boolean @default(false)

  ownerUuid String
  members   Json
  roles     Json?
  category  Json
  channels  Json

  rules Rules[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ramane de lucrat in continuare
}

model Rules {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String @unique @default(uuid())
  serverUuid String

  title   String
  content String

  server Servers @relation(fields: [serverUuid], references: [uuid])

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String @unique @default(uuid())
  serverUuid String

  banned   Boolean @default(false)
  ipBanned Json

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channels {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String @unique @default(uuid())
  serverUuid String

  title       String
  description String
  category    String
  role        Json
  type        String
  permission  Json

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String @unique @default(uuid())
  serverUuid String

  title      String
  channels   Json
  permission Json

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model serverRole {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())

  name       String
  color      String
  permission Json

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String @unique @default(uuid())
  ip   Json

  username     String  @unique
  nickname     String?
  bio          String?
  image        String
  servers      Json?
  friends      Json?
  blockedUsers Json?
  role         Json
  status       String  @default("online")
  otp          Int     @unique

  session Session[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  uuid    String @unique @default(uuid())
  ip      String
  browser String

  sessionToken String   @unique
  userUuid     String
  expires      DateTime
  user         User     @relation(fields: [userUuid], references: [uuid])

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}
